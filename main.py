import asyncio
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from utils.get_info import get_location, get_weather_by_location

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ JSON-—Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
with open('settings.json', 'r', encoding='utf-8') as file:
    settings = json.load(file)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
bot = Bot(token=settings['token'])
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –ø–æ–≥–æ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_weather = {}

# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —ç—Ç–∞–ø–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
class WeatherStates(StatesGroup):
    waiting_for_days = State()        # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
    waiting_for_start_point = State() # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
    waiting_for_end_point = State()   # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏
    waiting_for_intermediate = State() # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ç–æ—á–∫–∏

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /weather –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞. \n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: /help"
    )

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏, –æ–±—ä—è—Å–Ω—è–µ—Ç —á—Ç–æ –±–æ—Ç —É–º–µ–µ—Ç –¥–µ–ª–∞—Ç—å
@dp.message(Command('help'))
async def cmd_help(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –î–∞–Ω–Ω—ã–π –±–æ—Ç –º–æ–∂–µ—Ç –≤—ã–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ!\n"
        "–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /weather \n"
        "–ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é, –∫–æ–Ω–µ—á–Ω—É—é –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ –±–ª–∞–≥–æ–¥–∞—Ä—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º: 1/3/5 –¥–Ω–µ–π.\n"
        "–ß–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –¥–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã/–≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–º–æ—â—å, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @siberian_cde"
    )

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã, –Ω–∞—á–∏–Ω–∞–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
@dp.message(Command("weather"))
async def weather_command(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data="days_1"),
            InlineKeyboardButton(text="3 –¥–Ω—è", callback_data="days_3"),
            InlineKeyboardButton(text="5 –¥–Ω–µ–π", callback_data="days_5")
        ]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=keyboard)
    await state.set_state(WeatherStates.waiting_for_start_point)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
@dp.callback_query(lambda c: c.data.startswith("days_"))
async def process_days_selection(callback: types.CallbackQuery, state: FSMContext):
    days = int(callback.data.split("_")[1])
    await state.update_data(days=days)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞:")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
@dp.message(WeatherStates.waiting_for_start_point)
async def process_start_point(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–π –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    start_location = get_location(message.text)
    if start_location == 'api_error':
        await message.answer('API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º @...')
        return
    if not start_location:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    await state.update_data(start_point=start_location)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞:")
    await state.set_state(WeatherStates.waiting_for_end_point)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
@dp.message(WeatherStates.waiting_for_end_point)
async def process_end_point(message: types.Message, state: FSMContext):
    end_location = get_location(message.text)
    if end_location == 'api_error':
        await message.answer('API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º @...')
        return
    if not end_location:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(end_point=end_location)
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞", callback_data="add_intermediate"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data="show_forecast")
        ]
    ])
    await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞?", reply_markup=keyboard)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫, –µ—Å–ª–∏ —é–∑–µ—Ä –∑–∞—Ö–æ—Ç–µ–ª
@dp.message(WeatherStates.waiting_for_intermediate)
async def process_intermediate_point(message: types.Message, state: FSMContext):
    intermediate_location = get_location(message.text)
    if intermediate_location == 'api_error':
        await message.answer('API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º @...')
        return
    if not intermediate_location:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    data = await state.get_data()
    intermediate_points = data.get('intermediate_points', [])
    intermediate_points.append(intermediate_location)
    await state.update_data(intermediate_points=intermediate_points)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_intermediate"),
            InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data="show_forecast")
        ]
    ])
    await message.answer(f"–¢–æ—á–∫–∞ {intermediate_location[1]} –¥–æ–±–∞–≤–ª–µ–Ω–∞! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω—É –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É?", 
                        reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "add_intermediate")
async def add_intermediate_point(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç–∞:")
    await state.set_state(WeatherStates.waiting_for_intermediate)
    await callback.answer()

#–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–µ –ø–æ –¥–Ω—è–º
@dp.callback_query(lambda c: c.data == "show_forecast")
async def show_forecast(callback: types.CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ
        data = await state.get_data()
        print(f"Debug - State data: {data}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not data:
            await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /weather")
            await callback.answer()
            return
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ä—à—Ä—É—Ç–∞
        start_location = data.get('start_point')
        end_location = data.get('end_point')
        days = data.get('days')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –¥–∞–Ω–Ω—ã—Ö
        if not all([start_location, end_location, days]):
            await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /weather")
            await callback.answer()
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–æ—á–µ–∫
        intermediate_points = data.get('intermediate_points', [])
        all_points = [start_location] + intermediate_points + [end_location]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≤—Å–µ—Ö —Ç–æ—á–µ–∫
        all_weather = []

        for point in all_points:
            weather = get_weather_by_location(point[0], point[1])
            if weather == 'api_error':
                await callback.answer('API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º @...')
                return

            if not weather:
                await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {point[1]}")
                await state.clear()
                return
            all_weather.append((point[1], weather))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = callback.from_user.id
        user_weather[user_id] = {
            'days': days,
            'locations': all_weather
        }

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text=f"{'‚úÖ' if i == 1 else ''} –î–µ–Ω—å {i}",
                callback_data=f"day_{i}"
            ) for i in range(1, days + 1)
        ]])

        weather_text = f"üó∫ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {days} {'–¥–µ–Ω—å' if days == 1 else '–¥–Ω—è' if days < 5 else '–¥–Ω–µ–π'}:\n\n"
        weather_text += f"üìÖ –î–µ–Ω—å 1:\n\n"

        for city, weather in all_weather:
            weather_text += f"üèÅ {city}:\n"
            weather_text += f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather[0]['temperature']}¬∞C\n"
            weather_text += f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather[0]['humidity']}%\n"
            weather_text += f"üí® –í–µ—Ç–µ—Ä: {weather[0]['wind_speed']} –∫–º/—á\n"
            weather_text += f"‚òîÔ∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: {weather[0]['rain_prob']}%\n\n"

        await callback.message.answer(weather_text, reply_markup=keyboard)
        await state.clear()
        await callback.answer()
        
    except Exception as e:
        # –ü–æ–ª–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
        print(f"Debug - Full error in show_forecast: {str(e)}") 
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /weather")
        await callback.answer()
        await state.clear()

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–Ω—è–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
@dp.callback_query(lambda c: c.data.startswith("day_"))
async def switch_day(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_weather:
        await callback.message.answer("–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /weather")
        await callback.answer()
        return

    try:
        day = int(callback.data.split("_")[1])
        data = user_weather[user_id]
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text=f"{'‚úÖ' if i == day else ''} –î–µ–Ω—å {i}",
                callback_data=f"day_{i}"
            ) for i in range(1, data['days'] + 1)
        ]])

        weather_text = f"üó∫ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {data['days']} {'–¥–µ–Ω—å' if data['days'] == 1 else '–¥–Ω—è' if data['days'] < 5 else '–¥–Ω–µ–π'}:\n\n"
        weather_text += f"üìÖ –î–µ–Ω—å {day}:\n\n"

        for city, weather in data['locations']:
            weather_text += f"üèÅ {city}:\n"
            weather_text += f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather[day-1]['temperature']}¬∞C\n"
            weather_text += f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather[day-1]['humidity']}%\n"
            weather_text += f"üí® –í–µ—Ç–µ—Ä: {weather[day-1]['wind_speed']} –∫–º/—á\n"
            weather_text += f"‚òîÔ∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: {weather[day-1]['rain_prob']}%\n\n"

        await callback.message.edit_text(weather_text, reply_markup=keyboard)
    except Exception as e:
        print(f"Error in switch_day: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /weather")
    
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –ø–æ–≥–æ–¥—ã –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å
async def show_weather_day(message: types.Message, day: int):
    user_id = message.from_user.id
    data = user_weather[user_id]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text=f"{'‚úÖ' if i == day else ''} –î–µ–Ω—å {i}",
            callback_data=f"day_{i}"
        ) for i in range(1, data['days'] + 1)
    ]])

    weather_text = f"üó∫ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {data['days']} {'–¥–µ–Ω—å' if data['days'] == 1 else '–¥–Ω—è' if data['days'] < 5 else '–¥–Ω–µ–π'}:\n\n"
    weather_text += f"üìÖ –î–µ–Ω—å {day}:\n\n"

    for city, weather in data['locations']:
        weather_text += f"üèÅ {city}:\n"
        weather_text += f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather[day-1]['temperature']}¬∞C\n"
        weather_text += f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather[day-1]['humidity']}%\n"
        weather_text += f"üí® –í–µ—Ç–µ—Ä: {weather[day-1]['wind_speed']} –∫–º/—á\n"
        weather_text += f"‚òîÔ∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: {weather[day-1]['rain_prob']}%\n\n"

    await message.answer(weather_text, reply_markup=keyboard)

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
    asyncio.run(main())